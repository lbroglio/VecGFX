.TH "VecGFX::Vec4" 3 "Thu Jun 6 2024" "VecGFX" \" -*- nroff -*-
.ad l
.nh
.SH NAME
VecGFX::Vec4 \- A class holding a 4D Vector\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <vec\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVec4\fP (float \fBx\fP, float \fBy\fP, float \fBz\fP, float \fBw\fP)"
.br
.RI "Construct a new \fBVec4\fP object with a given x, y, z, and w components\&. "
.ti -1c
.RI "\fBVec4\fP ()"
.br
.RI "Construct a new \fBVec4\fP object -- Default constructor; sets all components to zero\&. "
.ti -1c
.RI "\fBVec4\fP (const \fBVec4\fP &f)"
.br
.RI "Copy Constructor\&. Create a new \fBVec4\fP from another\&. "
.ti -1c
.RI "float \fBdot\fP (const \fBVec4\fP &v)"
.br
.RI "Calculate the dot product of this Vector with another\&. "
.ti -1c
.RI "\fBVec4\fP \fBoperator+\fP (const \fBVec4\fP &v) const"
.br
.RI "Add operator override\&. Add together this Vector and v component wise (x1 + x2 \&.\&.\&. ) "
.ti -1c
.RI "\fBVec4\fP \fBoperator+=\fP (const \fBVec4\fP &v)"
.br
.RI "+= override\&. Add together this Vector and v component wise (x1 +x2 \&.\&.\&. ) and set this Vector to the sum "
.ti -1c
.RI "\fBVec4\fP \fBoperator\-\fP (const \fBVec4\fP &v) const"
.br
.RI "-operator override\&. Subtract v from this Vector component wise (x1 - x2 \&.\&.\&. ) "
.ti -1c
.RI "\fBVec4\fP \fBoperator\-=\fP (const \fBVec4\fP &v)"
.br
.RI "-= override\&. Subtract v from this Vector component wise (x1 - x2 \&.\&.\&. ) and set this Vector to the difference "
.ti -1c
.RI "\fBVec4\fP \fBoperator*\fP (const float &s) const"
.br
.RI "*operator override\&. Perform scalar multiplication on this \fBVec4\fP "
.ti -1c
.RI "\fBVec4\fP \fBoperator*=\fP (const float &s)"
.br
.RI "*= override\&. Perform scalar multiplication on this Vector and set it to the result "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBVec4\fP &v) const"
.br
.RI "== override\&. Compare two Vectors and return true if all of their components are the same\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBVec4\fP &v)"
.br
.RI "!= override\&. Compare two Vectors and return true if they aren't equal\&. "
.ti -1c
.RI "\fBVec4\fP \fBoperator=\fP (const \fBVec4\fP &v)"
.br
.RI "= Override\&. Set the elements of this \fBVec4\fP equal to another\&. "
.ti -1c
.RI "float \fBmagitude\fP ()"
.br
.RI "Calculate and return the magnitude of this Vector\&. "
.ti -1c
.RI "\fBVec4\fP \fBtransform\fP (const \fBMat4\fP &m)"
.br
.RI "Transform this \fBVec4\fP by multiplying it by a \fBMat4\fP\&. Equivalent to setting this \fBVec4\fP equal to m * *this\&. "
.ti -1c
.RI "float * \fBasArray\fP () const"
.br
.RI "Return an array represnetation of this Vector in the form {x, y, z} 
.br
Memory is allocated for the array with new\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "float & \fBx\fP = backingArr[0]"
.br
.RI "x component of this Vector "
.ti -1c
.RI "float & \fBy\fP = backingArr[1]"
.br
.RI "y component of this Vector "
.ti -1c
.RI "float & \fBz\fP = backingArr[2]"
.br
.RI "z component of this Vector "
.ti -1c
.RI "float & \fBw\fP = backingArr[3]"
.br
.RI "w component of this Vector "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "\fBVec4\fP \fBoperator*\fP (const float &s, const \fBVec4\fP &v)"
.br
.RI "*operator override\&. Perform scalar multiplication on this \fBVec4\fP "
.ti -1c
.RI "\fBVec4\fP \fBoperator*\fP (const \fBMat4\fP &m, const \fBVec4\fP &v)"
.br
.RI "*operator override\&. Mutliply a \fBVec4\fP by a given \fBMat4\fP "
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &o, const \fBVec4\fP &v)"
.br
.RI "Create a string representation of a \fBVec4\fP and pass it into an output stream\&. "
.in -1c
.SH "Detailed Description"
.PP 
A class holding a 4D Vector\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "VecGFX::Vec4::Vec4 (float x, float y, float z, float w)\fC [inline]\fP"

.PP
Construct a new \fBVec4\fP object with a given x, y, z, and w components\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP x component of the \fBVec4\fP to create 
.br
\fIy\fP y component of the \fBVec4\fP to create 
.br
\fIz\fP z component of the \fBVec4\fP to create 
.br
\fIw\fP w component of the \fBVec4\fP to create 
.RE
.PP

.SS "VecGFX::Vec4::Vec4 (const \fBVec4\fP & f)\fC [inline]\fP"

.PP
Copy Constructor\&. Create a new \fBVec4\fP from another\&. 
.PP
\fBParameters\fP
.RS 4
\fIf\fP \fBVec4\fP to initialize this one from 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "float * VecGFX::Vec4::asArray () const"

.PP
Return an array represnetation of this Vector in the form {x, y, z} 
.br
Memory is allocated for the array with new\&. 
.PP
\fBReturns\fP
.RS 4
Array representation of this Vector 
.RE
.PP

.SS "float VecGFX::Vec4::dot (const \fBVec4\fP & v)"

.PP
Calculate the dot product of this Vector with another\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP The Vector to take the dot product with 
.RE
.PP
\fBReturns\fP
.RS 4
The dot product of this Vector and v 
.RE
.PP

.SS "float VecGFX::Vec4::magitude ()"

.PP
Calculate and return the magnitude of this Vector\&. 
.PP
\fBReturns\fP
.RS 4
Magnitude of this Vector 
.RE
.PP

.SS "bool VecGFX::Vec4::operator!= (const \fBVec4\fP & v)"

.PP
!= override\&. Compare two Vectors and return true if they aren't equal\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Vector to compare to this one
.RE
.PP
\fBReturns\fP
.RS 4
bool holding the truth value true: The two Vectors are not equal false: The two Vectors are equal 
.RE
.PP

.SS "\fBVec4\fP VecGFX::Vec4::operator* (const float & s) const"

.PP
*operator override\&. Perform scalar multiplication on this \fBVec4\fP 
.PP
\fBParameters\fP
.RS 4
\fIs\fP Scalar to multiply the elements of this Vector by 
.RE
.PP
\fBReturns\fP
.RS 4
New Vector created after scaling 
.RE
.PP

.SS "\fBVec4\fP VecGFX::Vec4::operator*= (const float & s)"

.PP
*= override\&. Perform scalar multiplication on this Vector and set it to the result 
.PP
\fBParameters\fP
.RS 4
\fIs\fP Scalar to multiply the elements of this Vector by 
.RE
.PP
\fBReturns\fP
.RS 4
This Vector after the operation 
.RE
.PP

.SS "\fBVec4\fP VecGFX::Vec4::operator+ (const \fBVec4\fP & v) const"

.PP
Add operator override\&. Add together this Vector and v component wise (x1 + x2 \&.\&.\&. ) 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Vector to add to this one 
.RE
.PP
\fBReturns\fP
.RS 4
New Vector with the sum 
.RE
.PP

.SS "\fBVec4\fP VecGFX::Vec4::operator+= (const \fBVec4\fP & v)"

.PP
+= override\&. Add together this Vector and v component wise (x1 +x2 \&.\&.\&. ) and set this Vector to the sum 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Vector to add to this one 
.RE
.PP
\fBReturns\fP
.RS 4
This Vector after the add operation 
.RE
.PP

.SS "\fBVec4\fP VecGFX::Vec4::operator\- (const \fBVec4\fP & v) const"

.PP
-operator override\&. Subtract v from this Vector component wise (x1 - x2 \&.\&.\&. ) 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Vector to subtract from this one 
.RE
.PP
\fBReturns\fP
.RS 4
New Vector created from adding these together 
.RE
.PP

.SS "\fBVec4\fP VecGFX::Vec4::operator\-= (const \fBVec4\fP & v)"

.PP
-= override\&. Subtract v from this Vector component wise (x1 - x2 \&.\&.\&. ) and set this Vector to the difference 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Vector to subtract from this one 
.RE
.PP
\fBReturns\fP
.RS 4
This Vector after the operation 
.RE
.PP

.SS "\fBVec4\fP VecGFX::Vec4::operator= (const \fBVec4\fP & v)"

.PP
= Override\&. Set the elements of this \fBVec4\fP equal to another\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP \fBVec4\fP to set the elements of this one too 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBVec4\fP after its values are set 
.RE
.PP

.SS "bool VecGFX::Vec4::operator== (const \fBVec4\fP & v) const"

.PP
== override\&. Compare two Vectors and return true if all of their components are the same\&. 
.PP
\fBParameters\fP
.RS 4
\fIv\fP Vector to compare to this one
.RE
.PP
\fBReturns\fP
.RS 4
bool holding the truth value true: The two Vectors are equal false: The two Vectors are not equal 
.RE
.PP

.SS "\fBVec4\fP VecGFX::Vec4::transform (const \fBMat4\fP & m)"

.PP
Transform this \fBVec4\fP by multiplying it by a \fBMat4\fP\&. Equivalent to setting this \fBVec4\fP equal to m * *this\&. 
.PP
\fBParameters\fP
.RS 4
\fIm\fP Matrix to transform this \fBVec4\fP with 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBVec4\fP after the operation 
.RE
.PP

.SH "Friends And Related Function Documentation"
.PP 
.SS "\fBVec4\fP operator* (const float & s, const \fBVec4\fP & v)\fC [friend]\fP"

.PP
*operator override\&. Perform scalar multiplication on this \fBVec4\fP 
.PP
\fBParameters\fP
.RS 4
\fIs\fP Scalar to multiply the elements of this Vector by 
.RE
.PP
\fBReturns\fP
.RS 4
New Vector created after scaling 
.RE
.PP

.SS "\fBVec4\fP operator* (const \fBMat4\fP & m, const \fBVec4\fP & v)\fC [friend]\fP"

.PP
*operator override\&. Mutliply a \fBVec4\fP by a given \fBMat4\fP 
.PP
\fBParameters\fP
.RS 4
\fIm\fP \fBMat4\fP to multiply the \fBVec4\fP by\&. 
.br
\fIv\fP \fBVec4\fP to multiply with the \fBMat4\fP 
.RE
.PP
\fBReturns\fP
.RS 4
Product of the \fBMat4\fP and the \fBVec4\fP 
.RE
.PP

.SS "std::ostream & operator<< (std::ostream & o, const \fBVec4\fP & v)\fC [friend]\fP"

.PP
Create a string representation of a \fBVec4\fP and pass it into an output stream\&. 
.PP
\fBParameters\fP
.RS 4
\fIo\fP output stream to print to 
.br
\fIv\fP \fBVec4\fP to print a string representation of 
.RE
.PP
\fBReturns\fP
.RS 4
The output string after the \fBVec4\fP's representation is printed 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for VecGFX from the source code\&.
